; ******************************************************************************
; Writing my own monitor borrowing heavily from others.
; Rick Dodd - Feburary 2022
; ******************************************************************************
;  To assemble:
;    ../../tools/zmac -c -o ./ngd-monitor.hex -o ../../tools/zout/ngd-monitor.lst ngd-monitor.a80
;
;    ../../tools/zmac -c -n -o ../../tools/zout/ngd-monitor.cim -o ../../tools/zout/ngd-monitor.lst ngd-monitor.a80
;
;    ..\..\tools\sjasmplus.exe --lst=ngd-monitor.lst --sld=ngd-monitor.sld --raw=ngd-monitor.bin --fullpath .\ngd-monitor.a80
;  To send to ROM emulator:
;    py ../../tools/EPROM_NG_v2.0rc3.py -mem 2716 -spi y -auto y ./ngd-monitor.hex com8
; ******************************************************************************
                ;DEVICE NOSLOT64K
                ;SLDOPT COMMENT WPMEM, LOGPOINT, ASSERTION

SIOA_DATA       .EQU $74
SIOA_CMD        .EQU $76
SIOB_DATA       .EQU $75
SIOB_CMD        .EQU $77
SIO_DATA        .EQU SIOB_DATA          ; Make it easy to change between the A and B ports
SIO_CMD         .EQU SIOB_CMD

I8253_CTRL      .EQU $6F
I8253_CTR0      .EQU $6C
I8253_CTR1      .EQU $6D
I8253_CTR2      .EQU $6E

I8279_CMD       .EQU $79
I8279_DATA      .EQU $78

I8255_1A_DATA   .EQU $60
I8255_1B_DATA   .EQU $61
I8255_1C_DATA   .EQU $62
I8255_1_CMD     .EQU $63

KEY_CR          .EQU $0D
KEY_LF          .EQU $0A
KEY_BS          .EQU $08
KEY_SP          .EQU $20

;---------------------------------------------------------------------------------------------------
; DESCRIPTION:
;   Entry point when the ~RESET line is brought low.  A.K.A. - RST00.
; INPUTS:
;   None.
; OUTPUTS:
;   None.
;---------------------------------------------------------------------------------------------------
             .ORG $0000
Reset:
        DI                              ; Disable interrupts while configuring the system
        LD   SP,STACKTOP                ; Initialize the stack pointer
        JP   ColdBoot                   ; Initialize the hardware

;---------------------------------------------------------------------------------------------------
; DESCRIPTION:
;   Retrieve a byte of data from the SIO device if one is available. This routine is non-blocking.
; INPUTS:
;   None.
; OUTPUTS:
;   Reg A: the byte retrieved, undefined if a byte is not available
;   Flag Z: 1 if a byte was NOT available, 0 when a byte is available
;---------------------------------------------------------------------------------------------------
             .ORG $0008
RxData:
        RET

;---------------------------------------------------------------------------------------------------
; DESCRIPTION:
;   Retrieve a byte of data from the SIO device.  Waits until one is available. This routine is
;   blocking.
; INPUTS:
;   None.
; OUTPUTS:
;   Reg A: the byte retrieved
;---------------------------------------------------------------------------------------------------
             .ORG $0010
RxDataWait:
        CALL GetCh
        RET

;---------------------------------------------------------------------------------------------------
; DESCRIPTION:
;   Send a byte of data to the SIO.  Waits for the SIO to be available to send. This is blocking.
; INPUTS:
;   Reg A: the byte to send
; OUTPUTS:
;   None.
;---------------------------------------------------------------------------------------------------
             .ORG $0020
TxData:
        CALL PutCh
        RET

;---------------------------------------------------------------------------------------------------
; DESCRIPTION:
;   Interrupt Service Routine for all non-maskable interrupts.  (Interrupt Mode = 1)
; INPUTS:
;   None.
; OUTPUTS:
;   None.
;---------------------------------------------------------------------------------------------------
             .ORG $0038
ISR:
        RETI                            ; Return from interrupt

;===================================================================================================
;===================================================================================================
; System initialization routines
;===================================================================================================
;===================================================================================================

;---------------------------------------------------------------------------------------------------
; DESCRIPTION:
;   Initialize all the peripheral chips.
; INPUTS:
;   None.
; OUTPUTS:
;   None.
;---------------------------------------------------------------------------------------------------
ColdBoot:
        IM   1                          ; Interrupt Mode = 1, address $0038 is the hander
        CALL Init8253
        CALL InitSio
        CALL Init8279
        EI                              ; Initialization complete, enable the interrupts
        JP   ProcessCommands

;---------------------------------------------------------------------------------------------------
; DESCRIPTION:
;   Initialize the Intel 8253 Programable Interval Timer (PIT).
; INPUTS:
;   None.
; OUTPUTS:
;   None.
;---------------------------------------------------------------------------------------------------
Init8253:
        LD   A,$36                      ; Counter 0: load lsb,msb; square wave, binary
        OUT  (I8253_CTRL),A             ; Send it to control port
        LD   A,$0D                      ; low order byte ($000D = 154kHz (9600 x 16)
        OUT  (I8253_CTR0),A             ;
        LD   A,$00                      ; Send the rest; high order byte
        OUT  (I8253_CTR0),A             ;
        RET

;---------------------------------------------------------------------------------------------------
; DESCRIPTION:
;   Initialize the z80 SIO serial interface.
; INPUTS:
;   None.
; OUTPUTS:
;   None.
;---------------------------------------------------------------------------------------------------
InitSio:
                                        ; Channel A
        LD   A,$00                      ; select WR0
        OUT  (SIOA_CMD),A
        LD   A,$18                      ; channel reset
        OUT  (SIOA_CMD),A

        LD   A,$04                      ; select WR4
        OUT  (SIOA_CMD),A
        LD   A,$44                      ; $44 = Clock-Mode: 16x; Stop-Bits: 1; Parity: none
        OUT  (SIOA_CMD),A

        LD   A,$01                      ; select WR1
        OUT  (SIOA_CMD),A
        LD   A,$00                      ; $00 = waiting: off; interrupts: off
        OUT  (SIOA_CMD),A

        LD   A,$03                      ; select WR3
        OUT  (SIOA_CMD),A
        LD   A,$E1                      ; $E1 = Rx 8 bits/char; Auto-Enables: true; Rx-Enabled: true;
        OUT  (SIOA_CMD),A

        LD   A,$05                      ; select WR5
        OUT  (SIOA_CMD),A
        LD   A,$68                      ; $EA = DTR: false; Tx 8 bits/chars; Send-Break: false; Tx: true; RTS: false
        OUT  (SIOA_CMD),A

                                        ; Channel B
        LD   A,$00                      ; select WR0
        OUT  (SIOB_CMD),A
        LD   A,$18                      ; channel reset
        OUT  (SIOB_CMD),A

        LD   A,$04                      ; select WR4
        OUT  (SIOB_CMD),A
        LD   A,$44                      ; $44 = Clock-Mode: 16x; Stop-Bits: 1; Parity: none
        OUT  (SIOB_CMD),A

        LD   A,$01                      ; select WR1
        OUT  (SIOB_CMD),A
        LD   A,$00                      ; $00 = waiting: off; interrupts: off
        OUT  (SIOB_CMD),A

        LD   A,$03                      ; select WR3
        OUT  (SIOB_CMD),A
        LD   A,$E1                      ; $E1 = Rx 8 bits/char; Auto-Enables: true; Rx-Enabled: true;
        OUT  (SIOB_CMD),A

        LD   A,$05                      ; select WR5
        OUT  (SIOB_CMD),A
        LD   A,$68                      ; $EA = DTR: false; Tx 8 bits/chars; Send-Break: false; Tx: true; RTS: false
        OUT  (SIOB_CMD),A

        RET

;---------------------------------------------------------------------------------------------------
; DESCRIPTION:
;   Initialize the Intel 8279 Programmable Keyboard/Display Interface.
; INPUTS:
;   None.
; OUTPUTS:
;   None.
;---------------------------------------------------------------------------------------------------
Init8279:
        LD   A,$00                      ; 8-digit display with left entry, Encoded 8x8 keyboard with 2-key lockout
        OUT  (I8279_CMD),A              ;
        LD   A,$3F                      ; Set prescaler clock at 64kHz
        OUT  (I8279_CMD),A              ;
        LD   A,$C2                      ; Clears only the FIFO status
        OUT  (I8279_CMD),A              ;

        RET

;===================================================================================================
;===================================================================================================
; Basic IO routines
;===================================================================================================
;===================================================================================================

;---------------------------------------------------------------------------------------------------
; DESCRIPTION:
;   Gets the RX and TX statuses of the SIO device.
; INPUTS:
;   None.
; OUTPUTS:
;   Reg-A: undefined
;   Flag C: set if data is available to read
;   Flag Z: set if the TX buffer is empty (i.e. - ready to send)
;---------------------------------------------------------------------------------------------------
GetTtyStatus:
        LD   A,$00                      ; Select Register 0
        OUT  (SIO_CMD),A                ;
        IN   A,(SIO_CMD)                ; Get status word
        RRCA                            ; Rotate RX status ready into CY flag
        BIT  1,A                        ; Test bit 1 for TX buffer empty, this will set the Z flag
        RET

;---------------------------------------------------------------------------------------------------
; DESCRIPTION:
;   Retrieve a byte of data from the SIO device.  Waits until one is available. This routine is
;   blocking.
; INPUTS:
;   None.
; OUTPUTS:
;   Reg A: the byte retrieved
;---------------------------------------------------------------------------------------------------
GetCh:
        PUSH AF
GC1:
        CALL GetTtyStatus               ; C flag is set when receiver has a char
        JR   NC,GC1                     ; Loop until SIO flag a character is ready
        POP  AF
        IN   A,(SIO_DATA)               ; Read the data from
        RET

;---------------------------------------------------------------------------------------------------
; DESCRIPTION:
;   Send a byte of data to the SIO.  Waits for the SIO to be available to send. This is blocking.
; INPUTS:
;   Reg A: the byte to send
; OUTPUTS:
;   None.
;---------------------------------------------------------------------------------------------------
PutCh:
        PUSH AF
PC1:
        CALL GetTtyStatus               ; Z flag is set when transmitter is busy
        JR   Z,PC1                      ; Loop until SIO flag signals ready
        POP  AF                         ; Retrieve character
        OUT  (SIO_DATA),A              ; Output the character
        RET

;---------------------------------------------------------------------------------------------------
; DESCRIPTION:
;   Sends a string to the serial port.  The format of the string is a 1 byte length field followed
;   by <length> number of characters.
;   Example: .DB $07,'M','o','n','i','t','o','r'
; INPUTS:
;   Reg DE: address of the first byte of the string (the <length> field)
; OUTPUTS:
;   None.
;---------------------------------------------------------------------------------------------------
PrintStr:
        PUSH AF
        PUSH BC

        LD   A,(DE)                     ; Get the first byte (the length)
        LD   B,A                        ; B is automatically decremented by the DJNZ instruction
PSLoop:
        INC  DE                         ; Point to the next printable char
        LD   A,(DE)                     ; Load the char to print into A
        CALL PutCh                      ; Send the char to the SIO
        DJNZ PSLoop                     ; And repeat until done

        POP  BC
        POP  AF
        RET

;---------------------------------------------------------------------------------------------------
; DESCRIPTION:
;   Reads a string of characters from the SIO and stores it in a buffer.  The string is terminated
;   with a carriage return.  Backspaces are handled.  CTRL-C quits and discards the previous input.
; INPUTS:
;   Reg DE: Address of buffer
;   Reg B:  Max number of chars to read
; OUTPUTS:
;   Reg HL: End of string
;   Reg DE: Start of string
;   Reg B:  Number of chars remaining unused
;   Reg C:  Number of chars entered
;---------------------------------------------------------------------------------------------------
ReadStr:
        LD   C,0                        ; C holds the count of chars read
        LD   H,D                        ; Remember the statring address of the string
        LD   L,E
        INC  HL                         ; The 1st byte is the length of the string, so start with 2nd
RS_Loop:
        CALL GetCh                      ; Get the next typed character

        CP   KEY_CR                     ; Is it a carriage return?
        JR   Z,RS_Done                  ; Then we are done

        CP   KEY_BS                     ; Is it a backspace?
        JR   Z,RS_BS                    ;

        LD   (HL),A                     ; Store the char in the buffer
        INC  HL                         ; Move to the next byte in the buffer

        INC C                           ; Increment our key count

        CALL PutCh                      ; Echo the char back to the screen
        DJNZ RS_Loop
RS_Done:
        LD   A,C
        LD   (DE),A                     ; Save the length of the str to the first byte
        RET

RS_BS:
        INC  C                          ; Trick to quickly check if a non A register is zero
        DEC  C
        JR   Z,RS_Loop                  ; Don't do anything because we are at the beginning of the line

        INC  B                          ; We now have one more remaining spot in the buffer
        LD   (HL),255                   ; Put an EOL char in
        DEC  HL
        LD   A,KEY_SP                   ; overwrite the last captured char in the buffer with a space
        LD   (HL),A
        LD   A,KEY_BS                   ; Move the cursor back one char
        CALL PutCh
        LD   A,KEY_SP                   ; Overwrite the char on the screen with a space
        CALL PutCh
        LD   A,KEY_BS                   ; Move the cursor back one char
        CALL PutCh
        JR   RS_Loop                    ; Do it all over again

;===================================================================================================
;===================================================================================================
; Data conversion routines
;===================================================================================================
;===================================================================================================

;---------------------------------------------------------------------------------------------------
; DESCRIPTION:
;   Converts a byte to two ASCII hex characters.
; INPUTS:
;   Reg C: byte to convert
;   Reg HL: points to buffer with a minimum size of 2
; OUTPUTS:
;   Reg HL: point to the byte after the 2 byte buffer
;---------------------------------------------------------------------------------------------------
Byte2Hex:
        LD   A,$F0                      ; Mask off the lower nibble
        AND  C                          ; Reg. A now has the high nibble
        RRCA                            ; Move the high nibble to the low nibble
        RRCA                            ;
        RRCA                            ;
        RRCA                            ;
        CALL Nibble2Hex                 ; Convert the nibble to an ASCII char
        LD   A,$0F                      ; Mask off the upper nibble
        AND  C                          ; Reg. A now has the low nibble
        CALL Nibble2Hex                 ; Convert the nibble to an ASCII char
	RET

;---------------------------------------------------------------------------------------------------
; DESCRIPTION:
;   Converts a nibble (4 bits) to a ASCII hex character.
; INPUTS:
;   Reg C: nibble to convert (4 least significant bits)
;   Reg HL: points to buffer with a minimum size of 2
; OUTPUTS:
;   Reg HL: point to the byte after the 2 byte buffer
;---------------------------------------------------------------------------------------------------
Nibble2Hex:
        ADD  A,$30                      ; Convert to 0 to 15
        CP   $3A                        ; If digit is 0 thru 9
        JP   M,N2H1                     ; Save it in the buffer
        ADD  A,7                        ; Convert 10 thru 15 to A thru F
N2H1:
        LD   (HL),A                     ; Store the value in the buffer
        INC  HL                         ; Move pointer to next slot
        RET

;---------------------------------------------------------------------------------------------------
; DESCRIPTION:
;   Converts two ASCII hex characters to a byte.
; INPUTS:
;   Reg HL: points to buffer with a minimum size of 2
; OUTPUTS:
;   Reg A: value after the conversion
;   Reg HL: point to the byte after the 2 byte buffer
;---------------------------------------------------------------------------------------------------
Hex2Byte:
        LD   C,0                        ; Clear the results
        LD   A,(HL)                     ; Load the first character
        CALL Hex2Nibble                 ; Do the conversion
        INC  HL                         ; Point to the second character
        LD   A,(HL)                     ; Load the second character
        CALL Hex2Nibble                 ; Do the conversion
        INC  HL                         ; Point to the byte in the buffer afer the 2 character
        RET

Hex2Nibble:
        SLA  C                          ; Align results
        SLA  C                          ;
        SLA  C                          ;
        SLA  C                          ;
        SUB  $30                        ; Convert to a value between 0 and 15
        CP   10                         ; Check for A thru F
        JP   M,H2N1                     ; If 0 thru 9
        SUB  7                          ; Convert A thru F to 0 thru 9
H2N1:
        ADD  A,C                        ; Merge results
        LD   C,A                        ; Save in C
        RET

;---------------------------------------------------------------------------------------------------
; DESCRIPTION:
;   Converts a word to four ASCII hex characters.
; INPUTS:
;   Reg BC: word to convert
;   Reg HL: points to buffer with a minimum size of 4
; OUTPUTS:
;   Reg HL: point to the byte after the 4 byte buffer
;---------------------------------------------------------------------------------------------------
Word2Hex:
        PUSH BC                         ; Save so we can recall it later
        LD   C,B                        ; Get the high order byte first
        CALL Byte2Hex                   ; Convert the high order byte.  HL will is prointing to the
                                        ;   next empty slot in the buffer
        POP  BC                         ; Retrieve the original value.  C has the low order byte
        CALL Byte2Hex                   ; Convert the low order byte
        RET

;---------------------------------------------------------------------------------------------------
; DESCRIPTION:
;   Converts four ASCII hex characters to a word.
; INPUTS:
;   Reg HL: points to buffer with a minimum size of 4
; OUTPUTS:
;   Reg BC: value after the conversion
;   Reg HL: point to the byte after the 4 byte buffer
;---------------------------------------------------------------------------------------------------
Hex2Word:
        CALL Hex2Byte                   ; Convert the high order byte
        LD   B,A                        ; Save the high order byte in B
        CALL Hex2Byte                   ; Convert the low order byte
        LD   C,A                        ; Save the low order byte in C
        RET

;===================================================================================================
;===================================================================================================
; Command handling routines
;===================================================================================================
;===================================================================================================

;---------------------------------------------------------------------------------------------------
; DESCRIPTION:
;   This is the main loop of the program.  Read a command from the serial terminal and exectue it.
;   Repeat.
; INPUTS:
;   None.
; OUTPUTS:
;   None.
;---------------------------------------------------------------------------------------------------
ProcessCommands:
        LD   DE,WelcomeMsg
        CALL PrintStr
PC_Loop:
        LD   DE,PromptMsg
        CALL PrintStr

	LD   BC,$000D
	LD   DE,$001E
	LD   HL,LineBuffer
	CALL DumpRange

;        LD   B,CmdBufferSize
;        LD   DE,CmdBuffer
;        CALL ReadStr

;        LD   A,KEY_CR
;        CALL PutCh
;        LD   A,KEY_LF
;        CALL PutCh

;        LD   DE,CmdBuffer
;        CALL PrintStr

        JP   PC_Loop                    ; Do it all over again

;---------------------------------------------------------------------------------------------------
; DESCRIPTION:
;   Dump a range of memory to the TTY output.  The start address is rounded down to the nearest 16
;   byte boundry.  The end address is rounded up to the nearest 16 bit boundry.
; INPUTS:
;   Reg BC: start address
;   Reg DE: end address
;   Reg HL: points to the start of a buffer to hold one entire line before being sent to the TTY
; OUTPUTS:
;   None.
; NOTES:
;   The pointer in BC point to the next byte to print.  It is incremented and compared to DE.  The
;   dump is complete when they match.  HL points to the next empty slot in the buffer.
;---------------------------------------------------------------------------------------------------
DumpRange:
        LD   A,C                        ; Round down the starting address
        AND  $F0                        ;
        LD   C,A                        ;
        LD   (DumpCurrent),BC           ; Save off the adjusted starting address
                                        ;
        LD   A,E                        ; Round up the ending address
        AND  $F0                        ;
        ADD  A,$10                      ;
        LD   E,A                        ;
	    LD   (DumpEnd),DE               ; Save off the adjusted ending address
	                                    ;
        LD   (HL),LineBufSize           ; Store the length of the string
        INC  HL                         ; Point to the first free slot in the buffer
	    LD   (LineBufPtr),HL		    ; Save off the buffer pointer
DR1:
	    LD   BC,(DumpCurrent)           ; Get the address of the current byte to display
	    LD   HL,(DumpEnd)               ; Get the address of the last byte to display
	    OR   A                          ; Clear the C flags
        SBC  HL,BC                      ; Trick to do a 16 bit compare
        ADD  HL,BC                      ;
        JP   Z,DR2                      ; If DumpCurrent == DumpEnd then we are done

	    LD   DE,(DumpCurrent)           ; IX points to the first of 16 bytes to convert
	    LD   HL,LineBuffer              ; IY points the first byte of the buffer (the size)
	    INC  HL                         ; The size has already been set, move to the second byte
        CALL Dump16Bytes                ; Put the next sixteen bytes in the buffer
	    LD   (DumpCurrent),DE           ; Save the updated pointer to the next byte to convert
        LD   DE,LineBuffer              ; Input to PrintStr
        CALL PrintStr                   ; Print the string to the TTY
        JP   DR1                        ; Go back to the top of the loop
DR2:
        RET

;---------------------------------------------------------------------------------------------------
; DESCRIPTION:
;   Converts 16 bytes of data to their ASCII hex representation and stores the ASCII characters in
;   a buffer.
; INPUTS:
;   Reg DE: Address of the first byte to convert
;   Reg HL: Address of the next open slot in the buffer
; OUTPUTS:
;   Reg DE: Address of the next byte to conver
;   Reg HL: Address of the next open slot in the buffer
;---------------------------------------------------------------------------------------------------

Dump16Bytes:
        LD   B,16                       ; B is the counter
D16B1:
        LD   A,KEY_SP                   ; Add a leading space
        LD   (HL),A                     ;
	    INC  HL                         ; Point to the next slot in the buffer

        LD   A,(DE)                     ; Put the byte to convert into C
	    LD   C,A                        ; C and HL are inputs to Byte2Hex
        CALL Byte2Hex                   ; Convert the byte to hex and put it in the buffer
	    INC  DE                         ; Point to the next byte
        DJNZ D16B1                      ; If b > 0 then GOTO top of loop
        RET

;---------------------------------------------------------------------------------------------------

WelcomeMsg      .DB   $14,$0D,$0A,'ngd-monitor v0.1',$0D,$0A
PromptMsg       .DB   $04, $0D,$0A,'? '

                .ORG  $3000
CmdBufferSize   .EQU  40
CmdBuffer       .DEFS CmdBufferSize + 1     ; The first byte holds the length

HexBufferSize   .EQU  4
HexBuffer       .DEFS HexBufferSize + 1     ; The first byte hold the length

LineBufSize     .EQU  71
LineBuffer      .DEFS LineBufSize + 1       ; The first byte holds the length
LineBufPtr      .DW   $0000

DumpCurrent     .DW   $0000
DumpEnd         .DW   $0000

                .ORG  $37FF
STACKTOP        .EQU  $





;---------------------------------------------------------------------------------------------------
; DESCRIPTION:
;
; INPUTS:
;   None.
; OUTPUTS:
;   None.
;---------------------------------------------------------------------------------------------------
