;  To assemble:
;    ../../tools/zmac -c -o ./TestZ80SIO.hex -o ../../tools/zout/TestZ80SIO.lst TestZ80SIO.a80
;  To send to ROM emulator:
;    py ../../tools/EPROM_NG_v2.0rc3.py -mem 2716 -spi y -auto y ./TestZ80SIO.hex com8

I8253_CTRL      .EQU $6F
I8253_CNT0      .EQU $6C
I8253_CNT1      .EQU $6D
I8253_CNT2      .EQU $6E

SIOA_DATA       .EQU $74
SIOA_CMD        .EQU $76
SIOB_DATA       .EQU $75
SIOB_CMD        .EQU $77

                .ORG $37FF
STACK           .EQU $

                .org 0000h
InitStack:
        LD   SP,STACK

Init8253:
        LD   A,$36                      ; Set counter 0 to square wave, binary and prepare to load
        OUT  (I8253_CTRL),A
        LD   A,$0D                      ; low order byte ($00D0 = 154kHz (9600 x 16)
        OUT  (I8253_CNT0),A
        LD   A,$00                      ; Send the rest; high order byte
        OUT  (I8253_CNT0),A

InitSIO:
        ; Channel B
        LD   A,$00                      ; select WR0
        OUT  (SIOB_CMD),A
        LD   A,$18                      ; channel reset
        OUT  (SIOB_CMD),A

        LD   A,$04                      ; select WR4
        OUT  (SIOB_CMD),A
        LD   A,$44                      ; $44 = Clock-Mode: 16x; Stop-Bits: 1; Parity: none
        OUT  (SIOB_CMD),A

        LD   A,$01                      ; select WR1
        OUT  (SIOB_CMD),A
        LD   A,$00                      ; $00 = waiting: off; interrupts: off
        OUT  (SIOB_CMD),A

        LD   A,$03                      ; select WR3
        OUT  (SIOB_CMD),A
        LD   A,$E1                      ; $E1 = Rx 8 bits/char; Auto-Enables is true; Rx-Enabled = true;
        OUT  (SIOB_CMD),A

        LD   A,$05                      ; select WR5
        OUT  (SIOB_CMD),A
        LD   A,$68                      ; $EA = DTR = false; Tx 8 bits/chars; Send-Break = false; Tx = true; RTS = false
        OUT  (SIOB_CMD),A

        LD   DE,message
        CALL PrintStr

        ; echo input chars back to output
Infinity:
        CALL RxCharB                    ; output- A reg: character from input
        CALL TxCharB                    ; input-  A reg: has character to output
        JP   Infinity

;===============================================================================
; DESCRIPTION:
;   Gets the RX and TX statuses of the SIO device.
; INPUTS:
;   None.
; OUTPUTS:
;   Reg-A: undefined
;   Flag C: set if data is available to read
;   Flag Z: set if the TX buffer is empty (i.e. - ready to send)
;-------------------------------------------------------------------------------
SioStatus:
        LD   A,$00                      ; Select Register 0
        OUT  (SIOB_CMD),A               ;
        IN   A,(SIOB_CMD)               ; Get status word
        RRCA                            ; Rotate RX status ready into CY flag
        BIT  1,A                        ; Test bit 1 for TX buffer empty, this will set the Z flag
        RET

;===============================================================================
; Description:
;   Send a character to serial channel B.
; INPUTS:
;   A reg: character to send
; OUTPUTS:
;   <none>
;-------------------------------------------------------------------------------
TxCharB:
        PUSH AF
TxCharB1:
        CALL SioStatus                  ; Z = 0 when transmitter is busy
        JR   Z,TxCharB1                 ; Loop until SIO flag signals ready
        POP  AF                         ; Retrieve character
        OUT  (SIOB_DATA),A              ; Output the character
        RET

;===============================================================================
; Description:
;   Retrieves a character from serial channel B.  Block until a char is
;   available.
; INPUTS:
;   <none>
; OUTPUTS:
;   A reg: character retrieved
;-------------------------------------------------------------------------------
RxCharB:
        PUSH AF
RxCharB1:
        CALL SioStatus                  ; C = 0 when transmitter is busy
        JR   NC,RxCharB1                ; Loop until SIO flag a character is ready
        POP  AF
        IN   A,(SIOB_DATA)              ; Read the data from 
        RET

;===============================================================================
; DESCRIPTION:
;   Sends a string to the serial port.  The format of the string is a 1 byte 
;   length field followed by <length> number of characters.
;
;   Example: .DB $07,'M','o','n','i','t','o','r'
; INPUTS:
;   Reg DE: address of the first byte of the string (the <length> field)
; OUTPUTS:
;   None.
;-------------------------------------------------------------------------------
PrintStr:
        PUSH AF
        PUSH B

        LD   A,(DE)                     ; Get the first byte (the length)
        LD   B,A                        ; B is automatically decremented by the DJNZ instruction
PSLoop:
        INC  DE                         ; Point to the next printable char
        LD   A,(DE)                     ; Load the char to print into A
        CALL TxCharB                    ; Send the char to the SIO
        DJNZ PSLoop                     ; And repeat until done

        POP  B
        POP  AF
        RET

message .DB $0F,'Z80 SIO Test.',$0D,$0A