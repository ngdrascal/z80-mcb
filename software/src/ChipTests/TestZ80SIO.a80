;  To assemble: ./zmac -c -o ./zout/TestZ80SIO.hex -o ./zout/TestZ80SIO.lst TestZ80SIO.a80
;  To send to ROM emulator: py EPROM_NG_v2.0rc3.py -mem 2716 -spi y -auto y ./zout/TestZ80SIO.hex com8

SIOA_DATA       .EQU $74
SIOA_CMD        .EQU $76
SIOB_DATA       .EQU $75
SIOB_CMD        .EQU $77

I8253_CTRL      .EQU $6F
I8253_CNT0      .EQU $6C
I8253_CNT1      .EQU $6D
I8253_CNT2      .EQU $6E

                .ORG $37FF
STACK           .EQU $              ; Stack top

                .org 0000h
initStack:
        LD      SP,STACK

init8253:
        LD      A,$36               ; Set counter 0 to square wave, binary and prepare to load
        OUT     (I8253_CTRL)
        LD      A,$0D               ; low order byte ($0D00 = 154kHz (9600 x 16)
        OUT     (I8253_CNT0)
        LD      A,$00               ; Send the rest; high order byte
        OUT     (I8253_CNT0)

initSIO:
        ; Channel B
        LD      A,$00               ; select WR0
        OUT     (SIOB_CMD),A
        LD      A,$18               ; channel reset
        OUT     (SIOB_CMD),A

        LD      A,$04               ; select WR4
        OUT     (SIOB_CMD),A
        LD      A,$44               ; $44 = Clock-Mode: 16x; Stop-Bits: 1; Parity: none
        OUT     (SIOB_CMD),A

        LD      A,$01               ; select WR1
        OUT     (SIOB_CMD),A
        LD      A,$00               ; $00 = waiting: off; interrupts: off
        OUT     (SIOB_CMD),A

        ;LD      A,$02               ; select WR2
        ;OUT     (SIOB_CMD),A
        ;LD      A,$60               ; Interrupt Vector Address
        ;OUT     (SIOB_CMD),A
        ;
        LD      A,$03               ; select WR3
        OUT     (SIOB_CMD),A
        LD      A,$E1               ; $E1 = Rx 8 bits/char; Auto-Enables is true; Rx-Enabled = true;
        OUT     (SIOB_CMD),A

        LD      A,$05               ; select WR5
        OUT     (SIOB_CMD),A
        LD      A,$68               ; $EA = DTR = false; Tx 8 bits/chars; Send-Break = false; Tx = true; RTS = false
        OUT     (SIOB_CMD),A

        ; print "Hello." to the terminal
        LD      A,'H'
        CALL    txCharB
        LD      A,'e'
        CALL    txCharB
        LD      A,'l'
        CALL    txCharB
        CALL    txCharB
        LD      A,'o'
        CALL    txCharB
        LD      A,'.'
        CALL    txCharB

        ; echo input chars back to output
infinity:
        CALL    rxCharB             ; output- A reg: character from input
        CALL    txCharB             ; input-  A reg: has character to output
        JMP     infinity

;===============================================================================
; Description:
;   Send a character to serial channel B.
; INPUTS:
;   A reg: character to send
; OUTPUTS:
;   <none>
;-------------------------------------------------------------------------------
txCharB:
        PUSH    AF
txCharB1:
        IN      A,(SIOB_CMD)        ; Status byte D2=TX Buff Empty, D0=RX char available
        BIT     2,A                 ; Set Zero flag if still transmitting character
        JR      Z,txCharB1          ; Loop until SIO flag signals ready
        POP     AF                  ; Retrieve character
        OUT     (SIOB_DATA),A       ; Output the character
        RET

;===============================================================================
; Description:
;   Retrieves a character from serial channel B.  Block until a char is
;   available.
; INPUTS:
;   <none>
; OUTPUTS:
;   A reg: character retrieved
;-------------------------------------------------------------------------------
rxCharB:
        PUSH    AF
rxCharB1:
        IN      A,(SIOB_CMD)        ; Status byte D2=TX Buff Empty, D0=RX char ready
        BIT     0,A                 ; Set the Zero flag if still waiting for a character
        JR      Z,rxCharB1          ; Loop until SIO flag a character is ready
        POP     AF
        IN      A,(SIOB_DATA)       ; Read the data from 
        RET
