;-------------------------------------------------------------------------------
; Z80 CPU Monitor Rom Disassembly Listing
; Version SINGLE BOARD V5
; J.Owens June 2010
;-------------------------------------------------------------------------------
0000 31 FD 3F            LD SP,3FFDH
0003 CD B5 03            CALL L03B5
0006 FF                  RST 38H
0007 C7                  RST 00H
;------------------------------------------------------------------------------
; RST 08 - Transmit a character in A
;------------------------------------------------------------------------------
0008 F5          L0008:  PUSH AF
0009 DF          L0009:  RST 18H
000A 28 FD               JR Z,L0009
000C F1                  POP AF
000D D3 74               OUT (74H),A
000F C9                  RET
;-------------------------------------------------------------------------------
; RST 10 - Read a character into A
;-------------------------------------------------------------------------------
0010 DF          L0010:  RST 18H
0011 30 FD               JR NC,L0010
0013 DB 74               IN A,(74H)
0015 E6 7F               AND 7FH	; Note receive strips off D7 from byte
0017 C9                  RET
;-------------------------------------------------------------------------------
; RST 18 - Check SIO status
;-------------------------------------------------------------------------------
0018 97                  SUB A
0019 D3 76               OUT (76H),A
001B DB 76               IN A,(76H)
001D 0F                  RRCA
001E CB 4F               BIT 1,A
;-------------------------------------------------------------------------------
; RST 20	- does not function as a restart
;-------------------------------------------------------------------------------
0020 C9                  RET
0021 D7          L0021:  RST 10H	; Loops a character thru, echo to TTY
0022 18 E4               JR L0008

0024 E1          L0024:  POP HL	; GO command terminates here
0025 E1                  POP HL
0026 D1                  POP DE
0027 C1                  POP BC
;-------------------------------------------------------------------------------
; RST 28 - does not function as a restart
;-------------------------------------------------------------------------------
0028 F1                  POP AF
0029 08                  EX AF,AF'
002A D9                  EXX
002B FD E1               POP IY
002D DD E1               POP IX
002F E1                  POP HL
;-------------------------------------------------------------------------------
; RST 30	- does not function as a restart
;-------------------------------------------------------------------------------
0030 D1                  POP DE
0031 C1                  POP BC
0032 F1                  POP AF
0033 FB                  EI
0034 C9                  RET
0035 FF                  RST 38H
0036 FF                  RST 38H
0037 FF                  RST 38H
;------------------------------------------------------------------------------
; Interrupt Vector
;------------------------------------------------------------------------------
0038 F3          L0038:  DI
0039 F5                  PUSH AF
003A C5                  PUSH BC
003B D5                  PUSH DE
003C E5                  PUSH HL
003D DD E5               PUSH IX
003F FD E5               PUSH IY
0041 D9                  EXX
0042 08                  EX AF,AF'
0043 F5                  PUSH AF
0044 C5                  PUSH BC
0045 D5                  PUSH DE
0046 E5                  PUSH HL
0047 CD 87 02            CALL L0287	; Print "Single Board V5"
004A 18 26               JR L0072
;------------------------------------------------------------------------------
; PRINT A SPACE
;------------------------------------------------------------------------------
004C 3E 20       L004C:  LD A,20H
004E 18 B8               JR L0008
;------------------------------------------------------------------------------
; ENTRY POINT FOR <J> Memory Test
;------------------------------------------------------------------------------
0050 CD F7 02            CALL L02F7	; Get xxxx to DE, yyyy to HL from user
0053 D8                  RET C
0054 EB                  EX DE,HL
0055 7E          L0055:  LD A,(HL)
0056 47                  LD B,A
0057 2F                  CPL
0058 77                  LD (HL),A
0059 AE                  XOR (HL)
005A 70                  LD (HL),B
005B C2 76 02            JP NZ,L0276	; Write it out if problem
005E CD 68 00            CALL L0068	; HL=DE?
0061 23                  INC HL
0062 20 F1               JR NZ,L0055
0064 C9                  RET
0065 FF                  RST 38H
;------------------------------------------------------------------------------
; NMI Vector
;------------------------------------------------------------------------------
0066 18 D0               JR L0038
;-------------------------------------------------------------------------------
; CP HLDE
;-------------------------------------------------------------------------------
0068 7C          L0068:  LD A,H
0069 BA                  CP D
006A C0                  RET NZ
006B 7D                  LD A,L
006C BB                  CP E
006D C9                  RET
;-------------------------------------------------------------------------------
; Entry point for monitor after error
;-------------------------------------------------------------------------------
006E E1          L006E:  POP HL
006F 3E 3F               LD A,3FH	; "?"
0071 CF                  RST 08H
;-------------------------------------------------------------------------------
; Entry point for monitor - normal
;-------------------------------------------------------------------------------
0072 CD 94 02    L0072:  CALL L0294	; TXCRLF
0075 3E 3E               LD A,3EH	; ">"
0077 CF                  RST 08H
0078 21 72 00            LD HL,0072H	; Normal entry point
007B E5                  PUSH HL	; Save on stack
007C CD 21 00    L007C:  CALL L0021	; Loop user's character thru
007F FE 20               CP 20H	; <space>?
0081 28 F9               JR Z,L007C

0083 FE 56               CP 56H	; Character > "U"? (T in V4 monitor)
0085 30 E7               JR NC,L006E	; It's bad, go back
0087 D6 41               SUB 41H	; Reduce A-U down to 0-22 decimal
0089 38 E3               JR C,L006E	; character < "A"
008B 87                  ADD A,A
008C C6 99               ADD A,99H	; Starting address at $0099
008E 26 00               LD H,00H	; HL=0099 + A + A
0090 6F                  LD L,A
0091 5E                  LD E,(HL)	; Get command jump vector
0092 23                  INC HL
0093 56                  LD D,(HL)
0094 21 00 00            LD HL,0000H	; Reset HL
0097 D5                  PUSH DE	; Save it on stack
0098 C9                  RET		; Use stack to jump to command
;-------------------------------------------------------------------------------
; Keyboard Command Vector Table
;-------------------------------------------------------------------------------
L0099:	.WORD	$0000	; <A> $0000 RESET
L009B:	.WORD	$03E7	; <B> CHANGE BAUD [CHAN],[DIVISOR]
L009D:	.WORD	$025B	; <C> COMPARE MEMORY
L009F:	.WORD	$00C3	; <D> DUMP MEMORY (OR DISPLAY)
L00A1:	.WORD	$0211	; <E> EXAMINE/MODIFY REGISTERS
L00A3:	.WORD	$024C	; <F> FILL MEMORY WITH VALUE
L00A5:	.WORD	$0101	; <G> GO FROM LAST BRKPOINT OR ADDR
L00A7:	.WORD	$0152	; <H> HEX SUM/DIFFERENCE
L00A9:	.WORD	$013D	; <I> INPUT FROM PORT
L00AB:	.WORD	$0050	; <J> JUSTIFY MEMORY (MEM TEST)
L00AD:	.WORD	$012B	; <K> KILL/RESTORE LAST BRKPOINT
L00AF:	.WORD	$033A	; <L> LOAD INTEL HEX PROGRAM
L00B1:	.WORD	$0242	; <M> MOVE MEMORY
LOOB3:	.WORD	$0402	; <N> ROM BURNER COMMAND TABLE

; <N> combines with second key from vector table in th ROM burner area $4000-$7FFF to
; deliver a command to the ROM burner adapter for the Space-Time Z80 board.

L00B5:	.WORD	$014A	; <O> OUTPUT TO PORT
L00B7:	.WORD	$0166	; <P> PUT ASCII TEXT IN MEMORY
L00B9:	.WORD	$0133	; <Q> DISPLAY USER STACK LOCATION
L00BB:	.WORD	$018B	; <R> REGISTERS DISPLAY
L00BD:	.WORD	$00E5	; <S> SUBSTITUTE MEMORY
L00BF:	.WORD	$0179	; <T> TYPE ASCII FROM MEMORY [?]
L00C1:	.WORD	$0334	; <U> INTEL HEX LOAD WITH OFFSET ADDRESS
;-------------------------------------------------------------------------------
; DUMP/DISPLAY MEMORY
;-------------------------------------------------------------------------------
00C3 CD F7 02            CALL L02F7	; Get xxxx,yyyy from the user
00C6 D8                  RET C
00C7 EB                  EX DE,HL	; Start=HL, End=DE
00C8 CD 94 02    L00C8:  CALL L0294	; TXCRLF
00CB CD 7F 02            CALL L027F	; Print HL + "/"
00CE 06 10               LD B,10H	; Get 0 thru F bytes of data
00D0 C5          L00D0:  PUSH BC	; Save the byte counter
00D1 7E                  LD A,(HL)	; Get memory contents
00D2 CD 71 02            CALL L0271	; Convert byte to ASCII in BC & TX
00D5 CD 4C 00            CALL L004C	; TX a <space>
00D8 C1                  POP BC	; Get the byte counter back
00D9 CD 68 00            CALL L0068	; HL=DE?
00DC C8                  RET Z	; Yep, done
00DD 23                  INC HL	; Nope, get next memory location
00DE 05                  DEC B	; Decrement the byte counter
00DF 20 EF               JR NZ,L00D0	; Loop back until finished
00E1 DF                  RST 18H	; See if SIO has a character to read in
00E2 D8                  RET C	; Exit out if user tries to break in
00E3 18 E3               JR L00C8	; else get the next row of data
;-------------------------------------------------------------------------------
; Substitute Memory Command
;-------------------------------------------------------------------------------
00E5 CD CF 02            CALL L02CF	; Get xxxx from the user
00E8 D8                  RET C
00E9 CD 76 02    L00E9:  CALL L0276	; Print CRLF + "/" + byte at HL
00EC 3E 2D               LD A,2DH	; Character "-"
00EE CF                  RST 08H	; Print it
00EF EB                  EX DE,HL	; Swap
00F0 CD BB 02            CALL L02BB	; Get 4 chars from user convert to HL
00F3 EB                  EX DE,HL	; Into DE
00F4 38 01               JR C,L00F7	; If user entry terminated normal
00F6 73                  LD (HL),E	;  place the new value in (HL), else
00F7 23          L00F7:  INC HL	;  skip ahead to the next location
00F8 FE 20               CP 20H	; <space>?
00FA 28 ED               JR Z,L00E9	; Get next byte and location
00FC FE 0A               CP 0AH	; <line feed>?
00FE 28 E9               JR Z,L00E9	; Get next byte and location
0100 C9                  RET
;-------------------------------------------------------------------------------
; Go Command
;-------------------------------------------------------------------------------
0101 CD BB 02            CALL L02BB	; Entry point for <G>o, get xxxx
0104 30 06               JR NC,L010C	; Answer was ok
0106 FE 03               CP 03H	; Or is he trying to chicken out?
0108 C8                  RET Z
0109 C3 24 00            JP L0024	; POP user registers and GO 

010C EB          L010C:  EX DE,HL	; Put GO address in DE
010D 21 18 00            LD HL,0018H	; Locate in memory above stack'd regs
0110 39                  ADD HL,SP	; Get SP+0018 into HL
0111 2B                  DEC HL	; One less
0112 72                  LD (HL),D	; Load user vector from DE
0113 2B                  DEC HL	; Into that location for the
0114 73                  LD (HL),E	;  upcoming jump
0115 FE 2C       L0115:  CP 2CH	; "," does the user want a breakpoint also?
0117 C2 24 00            JP NZ,L0024	; Nope, just GO
011A CD CF 02            CALL L02CF	; Get the breakpoint addy from user
011D D8                  RET C	; Or quit the command if he fudges
011E 47                  LD B,A	; Temp store A
011F 7E                  LD A,(HL)	; Get contents of breakpoint location
0120 32 FF 3F            LD (3FFFH),A	; And save it for <K>ill/Restore
0123 22 FD 3F            LD (3FFDH),HL	; Might be good to save brkpnt location
0126 36 FF               LD (HL),0FFH	; And plug the hole with a RST 38H
0128 78                  LD A,B	; Get original A contents back
0129 18 EA               JR L0115	; See if user is happy with that breakpoint
;-------------------------------------------------------------------------------
; Kill / Restore breakpoint - resets breakpoint loc from $FF to orig contents
;-------------------------------------------------------------------------------
012B 2A FD 3F            LD HL,(3FFDH)	; Or if he'd rather not have one
012E 3A FF 3F            LD A,(3FFFH)	; Restore the original contents back
0131 77                  LD (HL),A
0132 C9                  RET
;-------------------------------------------------------------------------------
; Display User Stack Pointer
;-------------------------------------------------------------------------------
0133 CD 4C 00            CALL L004C
0136 21 18 00            LD HL,0018H	; Set user stack to int stack +0018
0139 39                  ADD HL,SP
013A C3 6C 02            JP L026C	; Print HL contents out
;-------------------------------------------------------------------------------
; Input port command
;-------------------------------------------------------------------------------
013D CD CF 02            CALL L02CF	; Get user port address
0140 D8                  RET C	; or quit
0141 CD 94 02            CALL L0294	; TXCRLF
0144 4D                  LD C,L	; Load the last two chars port into C
0145 ED 78               IN A,(C)	; Get the input from that port
0147 C3 71 02            JP L0271	; Print contents of A out
;-------------------------------------------------------------------------------
; Ouput port command
;-------------------------------------------------------------------------------
014A CD F7 02            CALL L02F7	; Get output port #, output data value
014D D8                  RET C	; or quit
014E 4B                  LD C,E	; Load port data into C
014F ED 69               OUT (C),L	; Take contents of L and output to port
0151 C9                  RET		
;-------------------------------------------------------------------------------
; Hex Sum Difference command
;-------------------------------------------------------------------------------
0152 CD F7 02            CALL L02F7	; Get xxxx (DE), yyyy (HL)
0155 D8                  RET C	
0156 CD 94 02            CALL L0294	; TXCRLF
0159 EB                  EX DE,HL	;
015A 19                  ADD HL,DE	; Add the numbers
015B CD 7F 02            CALL L027F	;Convert and print HL
015E 97                  SUB A	; Clear the CY flag
015F ED 52               SBC HL,DE	; Subtract it
0161 ED 52               SBC HL,DE	;  again
0163 C3 6C 02            JP L026C	; Convert and print and finish
;-------------------------------------------------------------------------------
;  <P>ut ASCII string into memory
;-------------------------------------------------------------------------------
0166 CD CF 02            CALL L02CF	; Get xxxx location from user
0169 D8                  RET C
016A CD 94 02            CALL L0294	; TXCRLF
016D CD 21 00    L016D:  CALL L0021	; RXA a character
0170 FE 03               CP 03H	; <ctrl-c>?
0172 CA 6C 02            JP Z,L026C	; Convert and print HL contents
0175 77                  LD (HL),A	; Put accum contents into location
0176 23                  INC HL	; Increment indexer
0177 18 F4               JR L016D	; And loop back until <ctrl-c> encounterd
;-------------------------------------------------------------------------------
;  Type ASCII from memory
;    also prints control characters and can trash your TTY
;-------------------------------------------------------------------------------
0179 CD F7 02            CALL L02F7	; Get xxxx, yyyy locations
017C D8                  RET C
017D CD 94 02            CALL L0294	; TXCRLF
0180 1A          L0180:  LD A,(DE)	; Get contents of memory at loc
0181 CF                  RST 08H	; Fire it from the cannon
0182 CD 68 00            CALL L0068	; HL=DE?
0185 C8                  RET Z	; Yes, done
0186 13                  INC DE	; Nope, get next location
0187 DF                  RST 18H	; See if the SIO is ready
0188 D8                  RET C	; Exit if user is trying to stop this mess
0189 18 F5               JR L0180	; Else continue firing at will
;-------------------------------------------------------------------------------
; Register contents command
;-------------------------------------------------------------------------------
018B CD FC 01            CALL L01FC	; 
018E CD 94 02    L018E:  CALL L0294	; TXCRLF
0191 1A                  LD A,(DE)
0192 FE FF               CP 0FFH
0194 C8                  RET Z
0195 CD E5 01            CALL L01E5
0198 18 F4               JR L018E
;------------------------------------------------------------------------------
019A 20 50 43 3D 58 20 
        P  C  =  X

01A0 20 41 3D 20 20 46 3D 20 20 42 3D 20 20 43 3D 20 
        A  =        F  =        B  =        C  =

01B0 20 44 3D 20 20 45 3D 20 48 4C 3D 58 20 49 58 3D
        D  =        E  =     H  L  =  X     I  X  =
        
01C0 58 20 49 59 3D 58 FF 20 41 27 3D 20 46 27 3D 20
     X     I  Y  =  X  **    A  '  =     F  '  =   
     
01D0 42 27 3D 20 43 27 3D 20 44 27 3D 20 45 27 3D 48
     B  '  =     C  '  =     D  '  =     E  '  =  H
     
01E0 4C 27 3D 58 FF
     L  '  =  X  **     
;------------------------------------------------------------------------------
01E5 0E 04       L01E5:  LD C,04H	; Print register text, 4 bytes at a time
01E7 1A          L01E7:  LD A,(DE)	; Load text at (DE)
01E8 13                  INC DE	; And next location
01E9 CF                  RST 08H	; Print contents 
01EA 0D                  DEC C	; Decrement counter until done
01EB 20 FA               JR NZ,L01E7	

01ED 2B                  DEC HL	
01EE 7E                  LD A,(HL)
01EF CD 71 02            CALL L0271
01F2 1A                  LD A,(DE)
01F3 FE 58               CP 58H	; If there's no "X" after the "="
01F5 C0                  RET NZ	; then that's all, otherwise
01F6 13                  INC DE	; Get the next location
01F7 2B                  DEC HL	; and that value from the stack
01F8 7E                  LD A,(HL)	; Load the value
01F9 C3 71 02            JP L0271	; Convert it to ASCII and print it

01FC CD 21 00    L01FC:  CALL L0021	; Loop an SIO character thru

01FF 21 1A 00            LD HL,001AH	; Point HL to the user registers
0202 39                  ADD HL,SP	; It's off the top of the stack
0203 11 9A 01            LD DE,019AH	; Text for Register Letters (A=,IX=, etc)
0206 FE 27               CP 27H	; Has the user hit " ' " for Alt regs?
0208 C0                  RET NZ	; Nope
0209 21 0C 00            LD HL,000CH	; Offset the register locations
020C 39                  ADD HL,SP	; And get that addy into HL
020D 11 C7 01            LD DE,01C7H	; Text for Alternate Register Letters (A'=)
0210 C9                  RET
;-------------------------------------------------------------------------------
; Edit the user registers
;-------------------------------------------------------------------------------
0211 CD FC 01            CALL L01FC	; Print the register
0214 CD 94 02    L0214:  CALL L0294	; TXCRLF
0217 1A                  LD A,(DE)	; End of the text?
0218 FE FF       L0218:  CP 0FFH
021A C8                  RET Z

021B CD E5 01            CALL L01E5	; Print register text 4 bytes at a time
021E CD 82 02            CALL L0282	; Print "/" + contents of BC
0221 E5                  PUSH HL	; Store register location
0222 CD BB 02    L0222:  CALL L02BB	; Get 4 characters into HL from user
0225 E5                  PUSH HL	; Save it into
0226 C1                  POP BC	; B and C
0227 E1                  POP HL	; Get back the old HL reg location
0228 F5                  PUSH AF	; Save the last character user sent
0229 30 0A               JR NC,L0235	; Store new data into the user register

022B F1          L022B:  POP AF	; Get the last user character back again
022C FE 20               CP 20H	; <space>?
022E 28 E4               JR Z,L0214	; Yeah, get something else
0230 FE 0A               CP 0AH	; Was a Line feed?
0232 28 E0               JR Z,L0214	; skip this too
0234 C9                  RET

0235 71          L0235:  LD (HL),C	; Store new user register
0236 1B                  DEC DE	; 
0237 1A                  LD A,(DE)	; Get register text
0238 13                  INC DE	; and increment pointer
0239 FE 58               CP 58H	; Is it "X"?
023B 20 EE               JR NZ,L022B	; Nope, we're done here
023D 23                  INC HL	; Yes, it's a reg pair
023E 70                  LD (HL),B	;  so store the other char as well
023F 2B                  DEC HL
0240 18 E9               JR L022B	; See if he wants to update more
;-------------------------------------------------------------------------------
;  Move memory command
;-------------------------------------------------------------------------------
0242 CD AD 02            CALL L02AD	; Set up for fill or LDIR
0245 D8                  RET C
0246 DD E1               POP IX	; Gets $0072 off the stack
0248 ED B0               LDIR		; Performs the move
024A DD E9               JP (IX)	; Jump to normal monitor entry
;-------------------------------------------------------------------------------
;  Fill memory command
;-------------------------------------------------------------------------------
024C CD AD 02            CALL L02AD	; Set up for fill, fill value in E
024F D8                  RET C
0250 DD E1               POP IX	; Get $0072 off the stack
0252 73          L0252:  LD (HL),E	; Load fill value into first location
0253 23                  INC HL	; Increment to next location
0254 0B                  DEC BC	; Decrement the counter
0255 78                  LD A,B	; Is it zero yet?
0256 B1                  OR C
0257 20 F9               JR NZ,L0252	; Loop back until we're done
0259 DD E9               JP (IX)	; And jump to normal monitor entry
;-------------------------------------------------------------------------------
; COMPARE MEMORY
;-------------------------------------------------------------------------------
025B CD AD 02            CALL L02AD	; Get xxxx,yyyy start, finish
025E D8                  RET C
025F 1A          L025F:  LD A,(DE)
0260 BE                  CP (HL)
0261 C2 76 02            JP NZ,L0276	; If it's bad, write it out
0264 13                  INC DE	; Otherwise continue on
0265 23                  INC HL
0266 0B                  DEC BC
0267 78                  LD A,B	; Check to see if byte counter is zero
0268 B1                  OR C
0269 20 F4               JR NZ,L025F
026B C9                  RET
;-------------------------------------------------------------------------------
; HL out - Convert and transmit contents of HL register pair
;-------------------------------------------------------------------------------
026C 7C          L026C:  LD A,H
026D CD 71 02            CALL L0271	; Convert A to ASCII hex in BC
0270 7D                  LD A,L
0271 CD 17 03    L0271:  CALL L0317	; Convert byte to ASCII
0274 18 21               JR L0297	; Send B and C to TXA and use that RET
;-------------------------------------------------------------------------------
; Print HL contents plus "/" and contents of memory at location
;-------------------------------------------------------------------------------
0276 CD 94 02    L0276:  CALL L0294	; TXCRLF
0279 CD 7F 02            CALL L027F	;Convert and print HL
027C 7E                  LD A,(HL)
027D 18 F2               JR L0271
027F CD 6C 02    L027F:  CALL L026C
0282 01 20 2F    L0282:  LD BC,2F20H
0285 18 10               JR L0297
0287 21 9C 02    L0287:  LD HL,029CH
028A CD 94 02    L028A:  CALL L0294	; TXCRLF
;-------------------------------------------------------------------------------
; Print (HL) number of bytes, starting with ASCII char from (HL+1 until E=0
;-------------------------------------------------------------------------------
028D 5E                  LD E,(HL)	; Get the character count into E
028E 23          L028E:  INC HL	; Move past it to first ascii char
028F 7E                  LD A,(HL)	; Get that and
0290 CF                  RST 08H	;  print it out
0291 1D                  DEC E	; Decrement the character counter
0292 20 FA               JR NZ,L028E	; Continuing until the string is done
;------------------------------------------------------------------------------
; TXCRLF
;------------------------------------------------------------------------------
0294 01 0A 0D    L0294:  LD BC,0D0AH	; Loads CR (0D) and LF (0A) into BC
;-------------------------------------------------------------------------------
; BCOUT - ASCII characters are assumed to be in BC, they are transmitted to TTY
;-------------------------------------------------------------------------------
0297 78          L0297:  LD A,B
0298 CF                  RST 08H	; Transmit ascii in B to the world
0299 79                  LD A,C
029A CF                  RST 08H	; Transmit ascii in C to the world
029B C9                  RET
;------------------------------------------------------------------------------
; SINGLE BOARD V5
;------------------------------------------------------------------------------
029C 10 53 49 4E
        S  I  N
        
02A0 47 4C 45 20 42 4F 41 52 44 20 56 35 2E CD F7
     G  L  E     B  O  A  R  D     V  5  .        
;------------------------------------------------------------------------------
;-------------------------------------------------------------------------------
; Routine to set up move, fill or LDIR command for the user
;-------------------------------------------------------------------------------
02AD CD F7 02	     CALL L02F7	; Get xxxx,yyyy and create BC byte count
02AF 02                  LD (BC),A	; Store A to (BC) location
02B0 D8                  RET C	; 
02B1 ED 52               SBC HL,DE	; Create the byte count
02B3 23                  INC HL	; One more for last byte
02B4 E5                  PUSH HL	; Save it
02B5 CD CF 02            CALL L02CF	; Get zzzz from user (destination)
02B8 C1                  POP BC	; Put byte counter in BC
02B9 EB                  EX DE,HL	; Flip so that Start=HL, End=DE
02BA C9                  RET		; and Byte count=BC
;-------------------------------------------------------------------------------
; Get 4 hex ascii from user, convert to hex value in HL
;-------------------------------------------------------------------------------
02BB 21 00 00    L02BB:  LD HL,0000H	; Start with a clean slate
02BE CD 21 00            CALL L0021	; Loop thru a character from user
02C1 FE 20               CP 20H	; <space>?
02C3 28 08               JR Z,L02CD	; Yes, set the CY flag and exit
02C5 FE 0A               CP 0AH	; Line feed?
02C7 28 04               JR Z,L02CD	; Yes, same thing
02C9 FE 0D               CP 0DH	; Carriage Return?
02CB 20 14               JR NZ,L02E1	; Nope, add it to the batch in HL
02CD 37          L02CD:  SCF		; Yes, set the CY and exit
02CE C9                  RET
;-------------------------------------------------------------------------------
;  This routine converts last 4 hex chars user types into a value in HL
; Rotates the old out and replaces with new until user hits terminating char
;-------------------------------------------------------------------------------
02CF 21 00 00    L02CF:  LD HL,0000H	; Clear HL
02D2 CD 21 00    L02D2:  CALL L0021	; Get a character from the console
02D5 FE 20               CP 20H	; Is he <space>'d out?
02D7 C8                  RET Z

02D8 FE 0A               CP 0AH	; Is it a Line Feed character?
02DA C8                  RET Z

02DB FE 0D               CP 0DH	; How about a Carriage Return?
02DD C8                  RET Z

02DE FE 2C               CP 2CH	; Comma (,) can be used to separate
02E0 C8                  RET Z

02E1 FE 03       L02E1:  CP 03H	; <Ctrl-C> will terminate, but sets CY
02E3 28 E8               JR Z,L02CD

02E5 29                  ADD HL,HL	; Rotate low nybble to the high one
02E6 29                  ADD HL,HL	;  to make room for the new one that
02E7 29          L02E7:  ADD HL,HL	;   has just been entered
02E8 29                  ADD HL,HL
02E9 D6 30               SUB 30H	; Reduce ascii 0 thru 9 down to bin
02EB FE 0A               CP 0AH	; Did he enter A thru F?
02ED 38 02               JR C,L02F1	; No, just 0 thru 9
02EF D6 07               SUB 07H	; Yes, subtract off the difference
02F1 E6 0F       L02F1:  AND 0FH	; And strip off the upper junk
02F3 85                  ADD A,L	; Adding the last value to the new one
02F4 6F                  LD L,A	; And save it back
02F5 18 DB               JR L02D2	; Continue receiving until he term's.
;-------------------------------------------------------------------------------
;  This routine called many times when user needs to enter a starting address
;   into DE, and an ending address into HL
; "GET xxxx (DE),yyyy (HL)"
;-------------------------------------------------------------------------------
02F7 CD CF 02    L02F7:  CALL L02CF	; Get 4 characters into HL
02FA D8                  RET C	; Quit if he breaks out
02FB EB                  EX DE,HL	; Move it into DE
02FC 18 D1               JR L02CF	; Get 4 characters into HL
;-------------------------------------------------------------------------------
; Useful routine that converts ASCII characters in BC to a byte value in Accum
;-------------------------------------------------------------------------------
02FE 78          L02FE:  LD A,B
02FF D6 30               SUB 30H
0301 FE 0A       L0301:  CP 0AH
0303 38 02               JR C,L0307
0305 D6 07               SUB 07H
0307 07          L0307:  RLCA
0308 07                  RLCA
0309 07                  RLCA
030A 07                  RLCA
030B 47                  LD B,A
030C 79                  LD A,C
030D D6 30               SUB 30H
030F FE 0A               CP 0AH
0311 38 02               JR C,L0315
0313 D6 07               SUB 07H
0315 80          L0315:  ADD A,B
0316 C9                  RET
;-------------------------------------------------------------------------------
; Another useful routine, converts byte value in Accum to ASCII hex in B and C
;-------------------------------------------------------------------------------
0317 47          L0317:  LD B,A
0318 E6 0F               AND 0FH
031A FE 0A               CP 0AH
031C 38 02               JR C,L0320
031E C6 07               ADD A,07H
0320 C6 30       L0320:  ADD A,30H
0322 4F                  LD C,A
0323 78                  LD A,B
0324 0F                  RRCA
0325 0F                  RRCA
0326 0F                  RRCA
0327 0F                  RRCA
0328 E6 0F               AND 0FH
032A FE 0A               CP 0AH
032C 38 02               JR C,L0330
032E C6 07               ADD A,07H
0330 C6 30       L0330:  ADD A,30H
0332 47                  LD B,A
0333 C9                  RET
;-------------------------------------------------------------------------------
; U command - Appears to be relocatable Intel Hex Load
;  Looks like you enter original location, followed by new location
;  Creates an offset byte value and adds it to HL for each input line
;-------------------------------------------------------------------------------
0334 CD F7 02            CALL L02F7	; Get xxxx,yyyy
0337 D8                  RET C
0338 ED 52               SBC HL,DE	; Calculate the difference
;------------------------------------------------------------------------------
; Intel Hex LOAD command
;------------------------------------------------------------------------------
033A E5                  PUSH HL	; And push it
033B DD E1               POP IX	; Popping it into IX
033D CD 94 02            CALL L0294	; TXCRLF
0340 CD 91 03    L0340:  CALL L0391	; Get $20-$7F from the TTY input
0343 D8                  RET C	; Return if <break>
0344 FE 3A               CP 3AH	; Is it ":" a colon?
0346 20 34               JR NZ,L037C	; No, declare checksum error and quit

0348 1E 00               LD E,00H	; First 2 chars is record length
034A CD 9D 03            CALL L039D	; Get those into BC and convert to A
034D 57                  LD D,A	; Store record length into D
034E CD 9D 03            CALL L039D	; Get next 2 characters
0351 67                  LD H,A	; It's the high address
0352 CD 9D 03            CALL L039D	; Get the next 2 characters
0355 6F                  LD L,A	; It's the low address
0356 DD E5               PUSH IX	; Get the offset
0358 C1                  POP BC	; Bringing it into BC
0359 09                  ADD HL,BC	; Add the offset to the address
035A CD 9D 03            CALL L039D	; Get next 2 chars and convert to value
035D FE 01               CP 01H	; Record type 01=End of File, 00=Data
035F 20 08               JR NZ,L0369	; No, this is data

0361 CD 9D 03            CALL L039D	; Get next 2 chars and conver to value
0364 7B                  LD A,E	; Look at the checksum
0365 A7                  AND A	; Is it zero so far?
0366 C8                  RET Z	; Yes, good
0367 18 13               JR L037C	; No, it's bad; Checksum error

0369 7A          L0369:  LD A,D	; Look at the record type again
036A A7                  AND A	; 00=Data record
036B 28 08               JR Z,L0375	; 

036D CD 9D 03            CALL L039D	; Get 2 valid characters, update cksum
0370 77                  LD (HL),A	; Store them into memory
0371 23                  INC HL	; Increment the memory pointer
0372 15                  DEC D	; Decrement the bytes left in this line
0373 18 F4               JR L0369	; And continue until the line recv'd

0375 CD 9D 03    L0375:  CALL L039D	; Get the checksum value from console
0378 7B                  LD A,E	; Now check the sum to see if zero
0379 A7                  AND A	;  setting Z flag
037A 28 C4               JR Z,L0340	; Yes, it's good, continue to next line

037C 21 82 03    L037C:  LD HL,0382H	; No, Say it's a Checksum Error
037F C3 8A 02            JP L028A	; TXCRLF and print the message, ending
;------------------------------------------------------------------------------
; CHECKSUM ERROR text
;------------------------------------------------------------------------------
0382 0E 43 48 45 43 4B 53 55 4D 20 45 52 52 4F 52
        C  H  E  C  K  S  U  M     E  R  R  O  R
;------------------------------------------------------------------------------
; Gets a character from the console, must be $20-$7F to be valid
;  (No control characters) <Ctrl-C> breaks with Z flag set
;------------------------------------------------------------------------------
0391 D7          L0391:  RST 10H
0392 FE 03               CP 03H
0394 28 05               JR Z,L039B
0396 FE 20               CP 20H
0398 38 F7               JR C,L0391
039A C9                  RET
;------------------------------------------------------------------------------
; Sets the CY flag and exits
;------------------------------------------------------------------------------
039B 37          L039B:  SCF
039C C9                  RET
;------------------------------------------------------------------------------
; Get 2 ASCII chars from console (assuming they are Hex 0-9,A-F)
; Move them into BC and convert to value in Accum, update the checksum in E
;------------------------------------------------------------------------------
039D CD 91 03    L039D:  CALL L0391
03A0 38 10               JR C,L03B2
03A2 47                  LD B,A
03A3 CD 91 03            CALL L0391
03A6 38 0A               JR C,L03B2
03A8 4F                  LD C,A
03A9 CD FE 02            CALL L02FE
03AC 4F                  LD C,A
03AD 7B                  LD A,E
03AE 91                  SUB C
03AF 5F                  LD E,A
03B0 79                  LD A,C
03B1 C9                  RET
03B2 C1          L03B2:  POP BC
03B3 18 C7               JR L037C
;------------------------------------------------------------------------------
; Initialize Hardware
;------------------------------------------------------------------------------
03B5 1E 02       L03B5:  LD E,02H	; p8253 counter 2
03B7 21 70 04            LD HL,0470H	; 1,136 x 0.5 uSec = 1,760 Hz/16=110 baud
03BA CD EB 03            CALL L03EB	; Write value to counter
03BD 1E 01               LD E,01H	; p8253 counter 1
03BF 21 A1 01            LD HL,01A1H	; 417 x 0.5 uSec = 4796Hz/16=299 (300 bd)
03C2 CD EB 03            CALL L03EB	; Write value to counter
03C5 1E 00               LD E,00H	; p8253 counter 0
03C7 21 1A 00            LD HL,001AH	; 26 x 0.5 uSec = 76,923Hz/16=4807 (4800)
03CA CD EB 03            CALL L03EB	; Write value to counter

03CD 21 DD 03            LD HL,03DDH	; Location of SIO control bytes
03D0 0E 76               LD C,76H	; Get port addy into C
03D2 06 0A       L03D2:  LD B,0AH	; Use B as a counter for bytes to send
03D4 ED A3               OUTI		; Output the first one, but
03D6 00                  NOP		;  give some pause for settling
03D7 ED A3               OUTI		; Output the second one, also
03D9 00                  NOP		;  giving some room for the SIO to react
03DA ED B3               OTIR		; Then go ahead with the rest of the bytes
03DC C9                  RET		; And return from this when done
;------------------------------------------------------------------------------
; Bytes for the control of the SIO
;------------------------------------------------------------------------------
03DD	L03DD:	.BYTE	$18	; SIO control, Reset chan, sel reg 0
		.BYTE	$18	; Write data to register 0
		.BYTE	$04	; Select Register 4
		.BYTE	$44	; divide clock by 16, use 1 stop bit
		.BYTE	$05	; Select Register 5
		.BYTE	$EA	; DTR, TX 8 bits/1 stop, RTS, TX Enable
		.BYTE	$03	; Select Register 3
		.BYTE	$C1	; RX 8 bits per char, RX Enable
		.BYTE	$01	; Select Register 1
		.BYTE	$00	; Disable Wait/Ready and Interrupt Line
;------------------------------------------------------------------------------	
; Sets up p8253 timer for baud rates, but allows the user to come in with
;  B command and change counter,divisor. Use with care as bad # will cause
;  you to not be able to connect TTY with the board until reset.
;------------------------------------------------------------------------------	
03E7 CD F7 02	     CALL L02F7	; Get xxxx (DE), yyyy (HL)
03EA D8                  RET C	; Quit if <ctrl-c>
03EB 97          L03EB:  SUB A	; Clear CY
03EC BB                  CP E		; Which counter is it?
03ED 3E 36               LD A,36H	; Data for p8253 control word
03EF 0E 6C               LD C,6CH	; Port address of p8253
03F1 43                  LD B,E	; Load counter # into B
03F2 28 05               JR Z,L03F9	; 
03F4 C6 40       L03F4:  ADD A,40H	; Select next counter
03F6 0C                  INC C	; And increment the port addy as well
03F7 10 FB       L03F7:  DJNZ L03F4	; Loop thru until all 3 counters writen
03F9 D3 6F       L03F9:  OUT (6FH),A	; Output the control word for counter
03FB ED 69               OUT (C),L	; Output the low counter value
03FD ED 61               OUT (C),H	; Output the high counter value
03FF C9                  RET		;  and keep going until all done
;------------------------------------------------------------------------------
; NORMAL END OF MONITOR
;------------------------------------------------------------------------------
0400 CD 04 04            CALL L0404	; Performs a CALL into the prom burner
0403 C7                  RST 00H	; Then reset the board afterwards
0404 CD 21 00    L0404:  CALL L0021	; Loop a character, 2nd char of "N" command
0407 FE 20               CP 20H	; Space'd out?
0409 28 F9               JR Z,L0404	; Go back until we get a valid command
040B D6 41               SUB 41H	; Reduce the key value down for table ref
040D DA 6E 00            JP C,L006E	; Is it less than "A"?
0410 FE 1A               CP 1AH	; Is it greater than "Z" ?
0412 D2 6E 00            JP NC,L006E	; Yes, it's an odd character, error
0415 87                  ADD A,A	; Otherwise double the value for each
0416 C6 20               ADD A,20H	;  two-bytes of address table
0418 26 04               LD H,04H	; $0420 starts the table
041A 6F                  LD L,A	; Move value into L, HL=table loc
041B 5E                  LD E,(HL)	; Get low byte into E
041C 23                  INC HL	;  Move to next location
041D 56                  LD D,(HL)	; Get high byte into D
041E D5                  PUSH DE	; Save vector onto stack
041F C9                  RET		; and POP it into the Program Counter
;------------------------------------------------------------------------------
; Second Keyboard Command Vector Table
; An "N" from the first menu, plus the letter of the next table to execute
; This section is the eprom burner board control portion
;------------------------------------------------------------------------------
L0420	.WORD	$0454	; <NA>
L0422	.WORD	$0565	; <NB>
L0424	.WORD	$0719	; <NC>
L0426	.WORD	$006E	; <ND> ERROR
L0428	.WORD	$05ED	; <NE>
L042A	.WORD	$0463	; <NF>	
L042C	.WORD	$0570	; <NG>
L042E	.WORD	$0757	; <NH>
L0430	.WORD	$0764	; <NI>
L0432	.WORD	$0472	; <NJ>
L0434	.WORD	$057B	; <NK>
L0436	.WORD	$006E	; <NL> ERROR, REPLACED BY "U" FROM MAIN MENU
L0438	.WORD	$05D6	; <NM>
L043A	.WORD	$1000	; <NN> Execute Rom at IC-22
L043C	.WORD	$006E	; <NO> Error
L043E	.WORD	$0591	; <NP>
L0440	.WORD	$0586	; <NQ>
L0442	.WORD	$041F	; <NR>
L0444	.WORD	$006E	; <NS> Error
L0446	.WORD	$006E	; <NT> Error
L0448	.WORD	$04AE	; <NU>
L044A	.WORD	$05A7	; <NV>
L044C	.WORD	$0490	; <NW>
L044E	.WORD	$0591	; <NX>
L0450	.WORD	$0495	; <NY>
L0452	.WORD	$059C	; <NZ>
;------------------------------------------------------------------------------
; <NA>
;------------------------------------------------------------------------------
0454 21 00 30            LD HL,3000H
0457 01 00 04            LD BC,0400H
045A 11 00 00            LD DE,0000H
045D FD 21 00 00         LD IY,0000H
0461 18 56               JR L04B9
0463 21 00 20            LD HL,2000H
0466 01 00 08            LD BC,0800H
0469 11 00 00            LD DE,0000H
046C FD 21 01 00         LD IY,0001H
0470 18 47               JR L04B9
0472 21 00 18            LD HL,1800H
0475 01 00 10            LD BC,1000H
0478 11 00 00            LD DE,0000H
047B FD 21 02 00         LD IY,0002H
047F 18 38               JR L04B9
0481 21 00 40            LD HL,4000H
0484 01 00 20            LD BC,2000H
0487 11 00 00            LD DE,0000H
048A FD 21 03 00         LD IY,0003H
048E 18 29               JR L04B9
0490 21 00 18            LD HL,1800H
0493 01 00 10            LD BC,1000H
0496 11 00 00            LD DE,0000H
0499 FD 21 03 00         LD IY,0003H
049D 18 1A               JR L04B9
049F 21 00 18            LD HL,1800H
04A2 01 00 10            LD BC,1000H
04A5 11 00 10            LD DE,1000H
04A8 FD 21 03 00         LD IY,0003H
04AC 18 0B               JR L04B9
04AE CD CF 02            CALL L02CF
04B1 D8                  RET C
04B2 E5                  PUSH HL
04B3 FD E1               POP IY
04B5 CD AD 02            CALL X0055
04B8 D8                  RET C
04B9 E5          L04B9:  PUSH HL
04BA D5                  PUSH DE
04BB C5                  PUSH BC
04BC CD 94 02            CALL L0294	; TXCRLF
04BF FD E5               PUSH IY
04C1 E1                  POP HL
04C2 7D                  LD A,L
04C3 21 2A 05            LD HL,052AH
04C6 DD 21 45 06         LD IX,0645H
04CA FE 01               CP 01H
04CC 38 1E               JR C,L04EC
04CE 21 34 05            LD HL,0534H
04D1 DD 21 50 06         LD IX,0650H
04D5 28 15               JR Z,L04EC
04D7 21 3E 05            LD HL,053EH
04DA DD 21 5B 06         LD IX,065BH
04DE FE 03               CP 03H
04E0 38 0A               JR C,L04EC
04E2 21 48 05            LD HL,0548H
04E5 DD 21 66 06         LD IX,0666H
04E9 C2 6E 00            JP NZ,L006E
04EC CD 8A 02    L04EC:  CALL L028A
04EF 21 52 05            LD HL,0552H
04F2 CD 8A 02            CALL L028A
04F5 CD 21 00            CALL L0021
04F8 FE 59               CP 59H
04FA 20 2A               JR NZ,L0526
04FC CD 94 02            CALL L0294	; TXCRLF
04FF CD 24 05            CALL L0524
0502 C1                  POP BC
0503 D1                  POP DE
0504 E1                  POP HL
0505 F5          L0505:  PUSH AF
0506 C5                  PUSH BC
0507 D5                  PUSH DE
0508 E5                  PUSH HL
0509 CD 13 06    L0509:  CALL L0613
050C 7E                  LD A,(HL)
050D CD 31 06            CALL L0631
0510 CD 24 05            CALL L0524
0513 23                  INC HL
0514 13                  INC DE
0515 0B                  DEC BC
0516 78                  LD A,B
0517 B1                  OR C
0518 20 EF               JR NZ,L0509
051A E1                  POP HL
051B D1                  POP DE
051C C1                  POP BC
051D F1                  POP AF
051E 3D                  DEC A
051F 20 E4               JR NZ,L0505
0521 C3 AE 05            JP L05AE
0524 DD E9       L0524:  JP (IX)
0526 C1          L0526:  POP BC
0527 D1                  POP DE
0528 E1                  POP HL
0529 C9                  RET
;------------------------------------------------------------------------------
;TYPE 2708 TYPE 2716 TYPE 2732 TYPE 2764 ARE YOU SURE? (Y)
;------------------------------------------------------------------------------
052A 09 54 59 50 45 20
        T  Y  P  E  

0530 32 37 30 38 09 54 59 50 45 20 32 37 31 36 09 54
     2  7  0  8     T  Y  P  E     2  7  1  6     T
     
0540 59 50 45 20 32 37 33 32 09 54 59 50 45 20 32 37
     Y  P  E     2  7  3  2     T  Y  P  E     2  7
     
0550 36 34 12 41 52 45 20 59 4F 55 20 53 55 52 45 3F
     6  4     A  R  E     Y  O  U     S  U  R  E  ?
     
0560 20 28 59 29 20      
        (  Y  )    
;------------------------------------------------------------------------------
0565 21 30 00            LD HL,3000
0568 01 30 01	     LD BC,0400
056B 11 00 00            LD DE,0000H
056E 18 3B               JR L05AB

0570 21 00 20            LD HL,2000H
0573 01 00 08            LD BC,0800H
0576 11 00 00            LD DE,0000H
0579 18 30               JR L05AB

057B 21 00 18            LD HL,1800H
057E 01 00 10            LD BC,1000H
0581 11 00 00    	     LD DE,0000H
0584 18 25               JR L05AB

0586 21 00 40            LD HL,4000H
0589 01 00 20            LD BC,2000H
058C 11 00 00            LD DE,0000H
058F 18 1A               JR L05AB

0591 21 00 18            LD HL,1800H
0594 01 00 10            LD BC,1000H
0597 11 00 00            LD DE,0000H
059A 18 0F               JR L05AB

059C 21 00 18            LD HL,1800H
059F 01 00 10            LD BC,1000H
05A2 11 00 10            LD DE,1000H
05A5 18 04               JR L05AB

05A7 CD AD 02            CALL X0055
05AA D8                  RET C
;------------------------------------------------------------------------------
05AB CD 50 06    L05AB:  CALL L0650
05AE CD 13 06    L05AE:  CALL L0613
05B1 CD 71 06            CALL L0671
05B4 BE                  CP (HL)
05B5 20 08               JR NZ,L05BF
05B7 23                  INC HL
05B8 13                  INC DE
05B9 0B                  DEC BC
05BA 78                  LD A,B
05BB B1                  OR C
05BC 20 F0               JR NZ,L05AE
05BE C9                  RET
05BF F5          L05BF:  PUSH AF
05C0 CD 76 02            CALL L0276
05C3 01 20 20            LD BC,2020H
05C6 CD 97 02            CALL L0297
05C9 F1                  POP AF
05CA F5          L05CA:  PUSH AF
05CB EB                  EX DE,HL
05CC CD 7F 02            CALL L027F	;Convert and print HL
05CF F1                  POP AF
05D0 CD 71 02            CALL L0271
05D3 C3 94 02            JP L0294
05D6 CD AD 02            CALL X0055
05D9 D8                  RET C
05DA CD 50 06            CALL L0650
05DD EB                  EX DE,HL
05DE CD 13 06    L05DE:  CALL L0613
05E1 CD 71 06            CALL L0671
05E4 77                  LD (HL),A
05E5 23                  INC HL
05E6 13                  INC DE
05E7 0B                  DEC BC
05E8 78                  LD A,B
05E9 B1                  OR C
05EA 20 F2               JR NZ,L05DE
05EC C9                  RET
05ED CD CF 02            CALL L02CF
05F0 D8                  RET C
05F1 E5                  PUSH HL
05F2 D1                  POP DE
05F3 CD 50 06            CALL L0650
05F6 CD 94 02    L05F6:  CALL L0294	; TXCRLF
05F9 CD 7F 02            CALL L027F	;Convert and print HL
05FC CD 13 06            CALL L0613
05FF CD 71 06            CALL L0671
0602 CD 71 02            CALL L0271
0605 23                  INC HL
0606 13                  INC DE
0607 CD 21 00            CALL L0021
060A FE 20               CP 20H
060C 28 E8               JR Z,L05F6
060E FE 0A               CP 0AH
0610 28 E4               JR Z,L05F6
0612 C9                  RET
0613 3E 10       L0613:  LD A,10H
0615 D3 62               OUT (62H),A
0617 7A                  LD A,D
0618 D3 61               OUT (61H),A
061A 3E 18               LD A,18H
061C D3 62               OUT (62H),A
061E 3E 10               LD A,10H
0620 D3 62               OUT (62H),A
0622 7B                  LD A,E
0623 D3 61               OUT (61H),A
0625 3E 12               LD A,12H
0627 D3 62               OUT (62H),A
0629 3E 10               LD A,10H
062B D3 62               OUT (62H),A
062D 97                  SUB A
062E D3 62               OUT (62H),A
0630 C9                  RET
0631 D3 61       L0631:  OUT (61H),A
0633 C9                  RET
0634 E5          L0634:  PUSH HL
0635 21 02 0F            LD HL,0F02H
0638 2B          L0638:  DEC HL
0639 7C                  LD A,H
063A B5                  OR L
063B 20 FB               JR NZ,L0638
063D E1                  POP HL
063E C9                  RET
063F E5          L063F:  PUSH HL
0640 21 39 00            LD HL,0039H
0643 18 F3               JR L0638
0645 3E 90               LD A,90H
0647 D3 63               OUT (63H),A
0649 DD 21 8A 06         LD IX,068AH
064D 3E 58               LD A,58H
064F C9                  RET
0650 3E 90       L0650:  LD A,90H
0652 D3 63               OUT (63H),A
0654 DD 21 AA 06         LD IX,06AAH
0658 3E 01               LD A,01H
065A C9                  RET
065B 3E 90               LD A,90H
065D D3 63               OUT (63H),A
065F DD 21 D1 06         LD IX,06D1H
0663 3E 01               LD A,01H
0665 C9                  RET
0666 3E 90               LD A,90H
0668 D3 63               OUT (63H),A
066A DD 21 F1 06         LD IX,06F1H
066E 3E 01               LD A,01H
0670 C9                  RET
0671 3E 92       L0671:  LD A,92H
0673 D3 63               OUT (63H),A
0675 3E 11               LD A,11H
0677 D3 62               OUT (62H),A
0679 3E 51               LD A,51H
067B D3 62               OUT (62H),A
067D 3E 71               LD A,71H
067F D3 62               OUT (62H),A
0681 DB 61               IN A,(61H)
0683 F5                  PUSH AF
0684 3E 90               LD A,90H
0686 D3 63               OUT (63H),A
0688 F1                  POP AF
0689 C9                  RET
068A 3E 10               LD A,10H
068C D3 62               OUT (62H),A
068E 3E 14               LD A,14H
0690 D3 62               OUT (62H),A
0692 E5                  PUSH HL
0693 E1                  POP HL
0694 3E 94               LD A,94H
0696 D3 62               OUT (62H),A
0698 CD 3F 06            CALL L063F
069B 3E 54               LD A,54H
069D D3 62               OUT (62H),A
069F 00                  NOP
06A0 3E 10               LD A,10H
06A2 D3 62               OUT (62H),A
06A4 E5                  PUSH HL
06A5 E1                  POP HL
06A6 97                  SUB A
06A7 D3 62               OUT (62H),A
06A9 C9                  RET
06AA 3E 10               LD A,10H
06AC D3 62               OUT (62H),A
06AE 3E 90               LD A,90H
06B0 D3 62               OUT (62H),A
06B2 00                  NOP
06B3 3E D0               LD A,0D0H
06B5 D3 62               OUT (62H),A
06B7 00                  NOP
06B8 3E 90               LD A,90H
06BA D3 62               OUT (62H),A
06BC CD 34 06            CALL L0634
06BF 3E D0               LD A,0D0H
06C1 D3 62               OUT (62H),A
06C3 3E 50               LD A,50H
06C5 D3 62               OUT (62H),A
06C7 E5                  PUSH HL
06C8 E1                  POP HL
06C9 3E 10               LD A,10H
06CB D3 62               OUT (62H),A
06CD 97                  SUB A
06CE D3 62               OUT (62H),A
06D0 C9                  RET
06D1 3E 10               LD A,10H
06D3 D3 62               OUT (62H),A
06D5 3E 90               LD A,90H
06D7 D3 62               OUT (62H),A
06D9 E5                  PUSH HL
06DA E1                  POP HL
06DB 3E D0               LD A,0D0H
06DD D3 62               OUT (62H),A
06DF CD 34 06            CALL L0634
06E2 3E 90               LD A,90H
06E4 D3 62               OUT (62H),A
06E6 00                  NOP
06E7 3E 10               LD A,10H
06E9 D3 62               OUT (62H),A
06EB E5                  PUSH HL
06EC E1                  POP HL
06ED 97                  SUB A
06EE D3 62               OUT (62H),A
06F0 C9                  RET
06F1 3E 10               LD A,10H
06F3 D3 62               OUT (62H),A
06F5 3E 90               LD A,90H
06F7 D3 62               OUT (62H),A
06F9 3E D0               LD A,0D0H
06FB D3 62               OUT (62H),A
06FD E5                  PUSH HL
06FE E1                  POP HL
06FF 3E D4               LD A,0D4H
0701 D3 62               OUT (62H),A
0703 CD 34 06            CALL L0634
0706 3E D0               LD A,0D0H
0708 D3 62               OUT (62H),A
070A 3E 90               LD A,90H
070C D3 62               OUT (62H),A
070E 00                  NOP
070F 3E 10               LD A,10H
0711 D3 62               OUT (62H),A
0713 E5                  PUSH HL
0714 E1                  POP HL
0715 97                  SUB A
0716 D3 62               OUT (62H),A
0718 C9                  RET
0719 CD 35 07            CALL L0735
071C D8                  RET C
071D CD 50 06            CALL L0650
0720 11 00 00            LD DE,0000H
0723 CD 13 06    L0723:  CALL L0613
0726 CD 71 06            CALL L0671
0729 FE FF               CP 0FFH
072B C2 CA 05            JP NZ,L05CA
072E 13                  INC DE
072F 2B                  DEC HL
0730 7C                  LD A,H
0731 B5                  OR L
0732 20 EF               JR NZ,L0723
0734 C9                  RET
0735 CD CF 02    L0735:  CALL L02CF
0738 D8                  RET C
0739 EB                  EX DE,HL
073A 21 00 00            LD HL,0000H
073D 01 00 04            LD BC,0400H
0740 09          L0740:  ADD HL,BC
0741 CD 4B 07            CALL L074B
0744 7A                  LD A,D
0745 B3                  OR E
0746 20 F8               JR NZ,L0740
0748 C3 94 02            JP L0294
074B 7B          L074B:  LD A,E
074C D6 01               SUB 01H
074E 27                  DAA
074F 5F                  LD E,A
0750 D0                  RET NC
0751 7A                  LD A,D
0752 D6 01               SUB 01H
0754 27                  DAA
0755 57                  LD D,A
0756 C9                  RET
0757 DD E1               POP IX
0759 21 00 18            LD HL,1800H
075C 01 00 10            LD BC,1000H
075F 1E FF               LD E,0FFH
0761 C3 52 02            JP L0252
0764 CD F7 02            CALL L02F7
0767 D8                  RET C

0768 1A          L0768:  LD A,(DE)
0769 2F                  CPL
076A 12                  LD (DE),A
076B CD 68 00            CALL L0068
076E C8                  RET Z
076F 13                  INC DE
0770 18 F6               JR L0768


L0772	RST 38H
